/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema.hospitalar;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabriel
 */
public class TelaMembrosEquipe extends javax.swing.JFrame {

    private Integer equipe_id;
    /**
     * Creates new form TelaMembrosEquipe
     */
    public TelaMembrosEquipe() {
        initComponents();
        IniciaComboBox();
    }
    
    public void setEquipe(TelaConsultarEquipe tela, Integer equipe){
        this.equipe_id = equipe;
        List<MembrosEquipe> list = new ArrayList<>();
        DBManager dbm = new DBManager();
        MembrosEquipe mem_eq = new MembrosEquipe();
        mem_eq.setEquipe_id(equipe);
        list = dbm.consultarMembrosEquipe(mem_eq);
        this.preencheTable(list);
    }
    
    public void preencheTable(List<MembrosEquipe> list){
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        model.setNumRows(0);
        String nome_eq = null;
        List<Equipe> list_eq = new ArrayList<>();
        Equipe eq = new Equipe();
        eq.setID(equipe_id);
        DBManager dbm = new DBManager();
        list_eq = dbm.getEquipe(eq);
        for (Equipe equipe : list_eq) {
            nome_eq = equipe.getNome();
        }
        for (MembrosEquipe membrosEquipe : list) {
            List<Funcionario> list_func = new ArrayList<>();
            Funcionario func = new Funcionario() {};
            func.setCPF(membrosEquipe.getFunc_cpf());
            list_func = dbm.getFuncionarios(func);
            for (Funcionario funcionario : list_func) {
                model.addRow(new String[]{membrosEquipe.getId().toString(),nome_eq,funcionario.getNome(),
                membrosEquipe.getFunc_cpf().toString()});   
            }
        }
    }
    
    public void IniciaComboBox(){                        
        ComboBox_prof.addItem("");
        ComboBox_prof.addItem("Enfermeiro");
        ComboBox_prof.addItem("MÃ©dico");        
        ComboBox_eq_func.addItem("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Labe_header = new javax.swing.JLabel();
        Label_prof = new javax.swing.JLabel();
        ComboBox_prof = new javax.swing.JComboBox<>();
        Label_nome = new javax.swing.JLabel();
        Button_cad = new javax.swing.JButton();
        Button_ap = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        ComboBox_eq_func = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        Labe_header.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Labe_header.setText("Membros Equipe");

        Label_prof.setText("Profissional");

        ComboBox_prof.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBox_profItemStateChanged(evt);
            }
        });

        Label_nome.setText("Nome");

        Button_cad.setText("Incluir");
        Button_cad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_cadActionPerformed(evt);
            }
        });

        Button_ap.setText("Excluir");
        Button_ap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_apActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Equipe", "Nome", "CPF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setHeaderValue("ID");
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(Labe_header, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(Label_prof))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(Label_nome))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ComboBox_prof, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ComboBox_eq_func, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Button_ap, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Button_cad, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Labe_header, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Label_prof)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBox_prof, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Label_nome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBox_eq_func, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(Button_cad)
                        .addGap(18, 18, 18)
                        .addComponent(Button_ap))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_cadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_cadActionPerformed
        String nome = null;
        String prof = null;
        String validar = null;
        if(ComboBox_prof.getSelectedItem().toString() != ""){
            prof = ComboBox_prof.getSelectedItem().toString();
        }
        if(ComboBox_eq_func.getSelectedItem().toString() != ""){
            nome = ComboBox_eq_func.getSelectedItem().toString();
        }
        if(nome != null && prof != null){
            List<MembrosEquipe> list_eq_func = new ArrayList<>();
            MembrosEquipe eq_func = new MembrosEquipe();
            eq_func.setEquipe_id(equipe_id);
            DBManager dbm = new DBManager();
            List<Funcionario> func = new ArrayList<>();
            func = dbm.getFuncionarios(null);
            for (Funcionario funcionario : func) {
                if (funcionario.getNome().equals(nome)) {
                    MembrosEquipe mem_eq = new MembrosEquipe();
                    mem_eq.setEquipe_id(equipe_id);
                    list_eq_func = dbm.consultarMembrosEquipe(mem_eq);
                    for (MembrosEquipe membro : list_eq_func) {
                        if(membro.getFunc_cpf().longValue() == funcionario.getCPF().longValue()){
                            validar = "X";
                        }
                    }
                    if(validar == null){
                        eq_func.setFunc_cpf(funcionario.getCPF());   
                    }                    
                }
            }
            if(validar == null){
                list_eq_func = dbm.cadastrarMembrosEquipe(eq_func);
                preencheTable(list_eq_func);
                JOptionPane.showMessageDialog(null,"Cadastrado com sucesso!!!");
            }else{
                JOptionPane.showMessageDialog(null,"Funcionario jÃ¡ pertence a equipe.","ERRO",
                        JOptionPane.ERROR_MESSAGE);
            }            
        }else{
            JOptionPane.showMessageDialog(null,"Por favor informe todos os campos","ERRO",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Button_cadActionPerformed

    private void ComboBox_profItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBox_profItemStateChanged
        DBManager dbm = new DBManager();
        ComboBox_eq_func.removeAllItems();
        ComboBox_eq_func.addItem("");
        if(ComboBox_prof.getSelectedItem().toString() == "Enfermeiro"){
            List<Enfermeiro> list_enf = new ArrayList<>();
            list_enf = dbm.getEnfermeiros(null);
            for (Enfermeiro enfermeiro : list_enf) {
                ComboBox_eq_func.addItem(enfermeiro.getNome());
            }
        }else if(ComboBox_prof.getSelectedItem().toString() == "MÃ©dico"){
            List<Medico> list_med = new ArrayList<>();
            list_med = dbm.getMedico(null);
            for (Medico medico : list_med) {
                List<Funcionario> list_func = new ArrayList<>();
                Funcionario func = new Funcionario() {};
                func.setCPF(medico.getCPF());
                list_func = dbm.getFuncionarios(func);
                for (Funcionario funcionario : list_func) {
                    ComboBox_eq_func.addItem(funcionario.getNome());
                }
            }
        }
    }//GEN-LAST:event_ComboBox_profItemStateChanged

    private void Button_apActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_apActionPerformed
        int linha = Table.getSelectedRow();
        if(linha >= 0){
            if(JOptionPane.showConfirmDialog(null,"Tem certeza ?","APAGAR",JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                DBManager dbm = new DBManager();
                MembrosEquipe eq_func = new MembrosEquipe();
                eq_func.setId(Integer.parseInt(Table.getValueAt(linha,0).toString()));
                eq_func.setEquipe_id(equipe_id);
                List<MembrosEquipe> list_eq_func = new ArrayList<>();
                list_eq_func = dbm.deletarMembrosEquipe(eq_func);                
                this.preencheTable(list_eq_func);
                JOptionPane.showMessageDialog(null,"Excluido com sucesso!!!");
            }
        }else{
            JOptionPane.showMessageDialog(null,"NecessÃ¡rio selecionar uma linha");
        }
    }//GEN-LAST:event_Button_apActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaMembrosEquipe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaMembrosEquipe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaMembrosEquipe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaMembrosEquipe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaMembrosEquipe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_ap;
    private javax.swing.JButton Button_cad;
    private javax.swing.JComboBox<String> ComboBox_eq_func;
    private javax.swing.JComboBox<String> ComboBox_prof;
    private javax.swing.JLabel Labe_header;
    private javax.swing.JLabel Label_nome;
    private javax.swing.JLabel Label_prof;
    private javax.swing.JTable Table;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
